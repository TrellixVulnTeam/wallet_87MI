{"ast":null,"code":"var _jsxFileName = \"/Users/michaelchang/Desktop/wallet/src/router/PrivateRoute.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { useSelector } from \"react-redux\";\nimport jwtDecode from 'jwt-decode';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PrivateRoute = ({\n  component: Component,\n  ...rest\n}) => {\n  _s();\n\n  const auth = useSelector(state => state.auth);\n  const [isAuthenticated, setIsAuthenticated] = useState(null);\n  useEffect(() => {\n    let token = localStorage.getItem('toobiauth');\n\n    if (token) {\n      let tokenExpiration = jwtDecode(token).exp;\n      let dateNow = new Date();\n\n      if (tokenExpiration < dateNow.getTime() / 1000) {\n        setIsAuthenticated(false);\n      } else {\n        setIsAuthenticated(true);\n      }\n    } else {\n      setIsAuthenticated(false);\n    } // eslint-disable-next-line\n\n  }, [auth]);\n\n  if (isAuthenticated === null) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Route, { ...rest,\n    render: props => !isAuthenticated ? /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Component, { ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PrivateRoute, \"EGoDdq0+//obEnuVfPDUlExLP5c=\", false, function () {\n  return [useSelector];\n});\n\n_c = PrivateRoute;\nexport default PrivateRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"sources":["/Users/michaelchang/Desktop/wallet/src/router/PrivateRoute.js"],"names":["React","useEffect","useState","Route","Redirect","useSelector","jwtDecode","PrivateRoute","component","Component","rest","auth","state","isAuthenticated","setIsAuthenticated","token","localStorage","getItem","tokenExpiration","exp","dateNow","Date","getTime","props"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA0C,OAA1C;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,SAAP,MAAsB,YAAtB;;;;AAEA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,SAAS,EAAEC,SAAb;AAAwB,KAAGC;AAA3B,CAAD,KAAuC;AAAA;;AAC1D,QAAMC,IAAI,GAAGN,WAAW,CAACO,KAAK,IAAIA,KAAK,CAACD,IAAhB,CAAxB;AACA,QAAM,CAACE,eAAD,EAAkBC,kBAAlB,IAAwCZ,QAAQ,CAAC,IAAD,CAAtD;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIc,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAZ;;AACI,QAAGF,KAAH,EAAS;AACL,UAAIG,eAAe,GAAGZ,SAAS,CAACS,KAAD,CAAT,CAAiBI,GAAvC;AACA,UAAIC,OAAO,GAAG,IAAIC,IAAJ,EAAd;;AAEA,UAAGH,eAAe,GAAGE,OAAO,CAACE,OAAR,KAAkB,IAAvC,EAA4C;AACxCR,QAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACH,OAFD,MAEK;AACDA,QAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH;AACJ,KATD,MASO;AACJA,MAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACF,KAbS,CAcd;;AACD,GAfQ,EAeN,CAACH,IAAD,CAfM,CAAT;;AAiBA,MAAGE,eAAe,KAAK,IAAvB,EAA4B;AAC1B,wBAAO,qCAAP;AACD;;AAED,sBACE,QAAC,KAAD,OAAWH,IAAX;AAAiB,IAAA,MAAM,EAAEa,KAAK,IAC5B,CAACV,eAAD,gBACE,QAAC,QAAD;AAAU,MAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,YADF,gBAGE,QAAC,SAAD,OAAeU;AAAf;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CAlCD;;GAAMhB,Y;UACSF,W;;;KADTE,Y;AAoCN,eAAeA,YAAf","sourcesContent":["import React, { useEffect, useState} from 'react';\nimport { Route, Redirect } from 'react-router-dom'\nimport { useSelector } from \"react-redux\";\nimport jwtDecode from 'jwt-decode';\n\nconst PrivateRoute = ({ component: Component, ...rest }) => {\n  const auth = useSelector(state => state.auth)\n  const [isAuthenticated, setIsAuthenticated] = useState(null)  \n  useEffect(() => {\n    let token = localStorage.getItem('toobiauth')\n        if(token){\n            let tokenExpiration = jwtDecode(token).exp;\n            let dateNow = new Date();\n\n            if(tokenExpiration < dateNow.getTime()/1000){\n                setIsAuthenticated(false)\n            }else{\n                setIsAuthenticated(true)\n            }\n        } else {\n           setIsAuthenticated(false)\n        }\n    // eslint-disable-next-line\n  }, [auth])\n\n  if(isAuthenticated === null){\n    return <></>\n  }\n\n  return (\n    <Route {...rest} render={props =>\n      !isAuthenticated ? (\n        <Redirect to='/login'/>\n      ) : (\n        <Component {...props} />\n      )\n    }\n    />\n  );\n};\n\nexport default PrivateRoute;"]},"metadata":{},"sourceType":"module"}