{"ast":null,"code":"var _jsxFileName = \"/Users/michaelchang/Desktop/wallet/src/components/MonthlyForm.js\",\n    _s = $RefreshSig$();\n\nimport { Button, CircularProgress, FormGroup, Input, InputAdornment, MenuItem, TextField } from \"@material-ui/core\";\nimport React, { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { categories } from \"../constants/form\";\nimport { useDispatch } from \"react-redux\";\nimport CurrencyTextField from \"@unicef/material-ui-currency-textfield\";\nimport { useAllItemsState, useMainState } from \"../reducers/mainReducer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction MonthlyForm() {\n  _s();\n\n  const [category, setCategory] = useState(\"\");\n  const [value, setValue] = useState(0);\n  const [enteringData, setEnteringData] = useState(true);\n  const [loading, setLoading] = useState(false);\n  const [list, setList] = useState();\n  const [date, setDate] = useState(Date);\n  const [error, setError] = useState();\n  const [description, setDescription] = useState(\"\");\n  const {\n    labels,\n    setLabels\n  } = useMainState();\n  const {\n    allItems,\n    setAllItems\n  } = useAllItemsState();\n  useEffect(() => {\n    setList(labels);\n  }, [labels]);\n\n  const reset = () => {\n    setCategory(\"\");\n    setValue(0);\n    setDate(Date);\n    setDescription(\"\");\n    setEnteringData(true);\n    setLoading(false);\n  };\n\n  const generateColor = () => {\n    return \"#\" + (Math.random().toString(16) + \"000000\").substring(2, 8);\n  };\n\n  const handleAdd = () => {\n    setError(\"\");\n    setLoading(true);\n    setEnteringData(false);\n    setTimeout(() => {\n      if (category && value) {\n        const newItem = {\n          id: date,\n          label: category,\n          value: Number(value),\n          color: generateColor(),\n          //\"#\" + Math.floor(Math.random() * 16777215).toString(16),\n          description: description\n        };\n        setAllItems(newItem);\n        reset();\n      } else {\n        setError(\"error\");\n        setLoading(false);\n      }\n    }, 1000);\n  };\n\n  return loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n    className: \"loading\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(FormGroup, {\n    className: \"form_control\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        className: \"form_control--input\",\n        id: \"standard-select-category\",\n        select: true,\n        label: \"Select\",\n        value: category,\n        variant: \"outlined\",\n        onChange: e => setCategory(e.target.value),\n        helperText: \"Please select your category\",\n        children: categories.map(option => /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: option.value,\n          children: option.label\n        }, option.value, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        id: \"date\",\n        className: \"form_control--input\",\n        label: \"Date\",\n        type: \"date\",\n        variant: \"outlined\",\n        value: date,\n        InputLabelProps: {\n          shrink: true\n        },\n        onChange: e => setDate(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        className: \"form_control__multiline\",\n        label: \"Description\",\n        multiline: true,\n        maxRows: 4,\n        value: description,\n        variant: \"outlined\",\n        onChange: e => setDescription(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CurrencyTextField, {\n        className: \"form_control--input\",\n        label: \"Amount\",\n        variant: \"outlined\",\n        value: value,\n        currencySymbol: \"$\",\n        minimumValue: \"0\",\n        outputFormat: \"string\",\n        decimalCharacter: \".\",\n        digitGroupSeparator: \",\",\n        onChange: (e, value) => setValue(value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      type: \"submit\",\n      onClick: e => handleAdd(),\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\" \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MonthlyForm, \"sRQ670FjLDP0/fWwglGBOJSVQVI=\", false, function () {\n  return [useMainState, useAllItemsState];\n});\n\n_c = MonthlyForm;\nexport default MonthlyForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"MonthlyForm\");","map":{"version":3,"sources":["/Users/michaelchang/Desktop/wallet/src/components/MonthlyForm.js"],"names":["Button","CircularProgress","FormGroup","Input","InputAdornment","MenuItem","TextField","React","useState","useEffect","useSelector","categories","useDispatch","CurrencyTextField","useAllItemsState","useMainState","MonthlyForm","category","setCategory","value","setValue","enteringData","setEnteringData","loading","setLoading","list","setList","date","setDate","Date","error","setError","description","setDescription","labels","setLabels","allItems","setAllItems","reset","generateColor","Math","random","toString","substring","handleAdd","setTimeout","newItem","id","label","Number","color","e","target","map","option","shrink"],"mappings":";;;AAAA,SACEA,MADF,EAEEC,gBAFF,EAGEC,SAHF,EAIEC,KAJF,EAKEC,cALF,EAMEC,QANF,EAOEC,SAPF,QAQO,mBARP;AASA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,iBAAP,MAA8B,wCAA9B;AAEA,SAASC,gBAAT,EAA2BC,YAA3B,QAA+C,yBAA/C;;;AAEA,SAASC,WAAT,GAAuB;AAAA;;AACrB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAACa,YAAD,EAAeC,eAAf,IAAkCd,QAAQ,CAAC,IAAD,CAAhD;AACA,QAAM,CAACe,OAAD,EAAUC,UAAV,IAAwBhB,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACiB,IAAD,EAAOC,OAAP,IAAkBlB,QAAQ,EAAhC;AACA,QAAM,CAACmB,IAAD,EAAOC,OAAP,IAAkBpB,QAAQ,CAACqB,IAAD,CAAhC;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBvB,QAAQ,EAAlC;AACA,QAAM,CAACwB,WAAD,EAAcC,cAAd,IAAgCzB,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM;AAAE0B,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAwBpB,YAAY,EAA1C;AACA,QAAM;AAAEqB,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA4BvB,gBAAgB,EAAlD;AACAL,EAAAA,SAAS,CAAC,MAAM;AACdiB,IAAAA,OAAO,CAACQ,MAAD,CAAP;AACD,GAFQ,EAEN,CAACA,MAAD,CAFM,CAAT;;AAIA,QAAMI,KAAK,GAAG,MAAM;AAClBpB,IAAAA,WAAW,CAAC,EAAD,CAAX;AACAE,IAAAA,QAAQ,CAAC,CAAD,CAAR;AACAQ,IAAAA,OAAO,CAACC,IAAD,CAAP;AACAI,IAAAA,cAAc,CAAC,EAAD,CAAd;AACAX,IAAAA,eAAe,CAAC,IAAD,CAAf;AACAE,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GAPD;;AAQA,QAAMe,aAAa,GAAG,MAAM;AAC1B,WAAO,MAAM,CAACC,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,IAA6B,QAA9B,EAAwCC,SAAxC,CAAkD,CAAlD,EAAqD,CAArD,CAAb;AACD,GAFD;;AAIA,QAAMC,SAAS,GAAG,MAAM;AACtBb,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACAP,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAF,IAAAA,eAAe,CAAC,KAAD,CAAf;AACAuB,IAAAA,UAAU,CAAC,MAAM;AACf,UAAI5B,QAAQ,IAAIE,KAAhB,EAAuB;AACrB,cAAM2B,OAAO,GAAG;AACdC,UAAAA,EAAE,EAAEpB,IADU;AAEdqB,UAAAA,KAAK,EAAE/B,QAFO;AAGdE,UAAAA,KAAK,EAAE8B,MAAM,CAAC9B,KAAD,CAHC;AAId+B,UAAAA,KAAK,EAAEX,aAAa,EAJN;AAIU;AACxBP,UAAAA,WAAW,EAAEA;AALC,SAAhB;AAOAK,QAAAA,WAAW,CAACS,OAAD,CAAX;AACAR,QAAAA,KAAK;AACN,OAVD,MAUO;AACLP,QAAAA,QAAQ,CAAC,OAAD,CAAR;AACAP,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF,KAfS,EAeP,IAfO,CAAV;AAgBD,GApBD;;AAqBA,SAAOD,OAAO,gBACZ,QAAC,gBAAD;AAAkB,IAAA,SAAS,EAAC;AAA5B;AAAA;AAAA;AAAA;AAAA,UADY,gBAGZ,QAAC,SAAD;AAAW,IAAA,SAAS,EAAC,cAArB;AAAA,4BACE;AAAA,8BACE,QAAC,SAAD;AACE,QAAA,SAAS,EAAC,qBADZ;AAEE,QAAA,EAAE,EAAC,0BAFL;AAGE,QAAA,MAAM,MAHR;AAIE,QAAA,KAAK,EAAC,QAJR;AAKE,QAAA,KAAK,EAAEN,QALT;AAME,QAAA,OAAO,EAAC,UANV;AAOE,QAAA,QAAQ,EAAGkC,CAAD,IAAOjC,WAAW,CAACiC,CAAC,CAACC,MAAF,CAASjC,KAAV,CAP9B;AAQE,QAAA,UAAU,EAAC,6BARb;AAAA,kBAUGR,UAAU,CAAC0C,GAAX,CAAgBC,MAAD,iBACd,QAAC,QAAD;AAA6B,UAAA,KAAK,EAAEA,MAAM,CAACnC,KAA3C;AAAA,oBACGmC,MAAM,CAACN;AADV,WAAeM,MAAM,CAACnC,KAAtB;AAAA;AAAA;AAAA;AAAA,gBADD;AAVH;AAAA;AAAA;AAAA;AAAA,cADF,eAiBE,QAAC,SAAD;AACE,QAAA,EAAE,EAAC,MADL;AAEE,QAAA,SAAS,EAAC,qBAFZ;AAGE,QAAA,KAAK,EAAC,MAHR;AAIE,QAAA,IAAI,EAAC,MAJP;AAKE,QAAA,OAAO,EAAC,UALV;AAME,QAAA,KAAK,EAAEQ,IANT;AAOE,QAAA,eAAe,EAAE;AACf4B,UAAAA,MAAM,EAAE;AADO,SAPnB;AAUE,QAAA,QAAQ,EAAGJ,CAAD,IAAOvB,OAAO,CAACuB,CAAC,CAACC,MAAF,CAASjC,KAAV;AAV1B;AAAA;AAAA;AAAA;AAAA,cAjBF,eA8BE,QAAC,SAAD;AACE,QAAA,SAAS,EAAC,yBADZ;AAEE,QAAA,KAAK,EAAC,aAFR;AAGE,QAAA,SAAS,MAHX;AAIE,QAAA,OAAO,EAAE,CAJX;AAKE,QAAA,KAAK,EAAEa,WALT;AAME,QAAA,OAAO,EAAC,UANV;AAOE,QAAA,QAAQ,EAAGmB,CAAD,IAAOlB,cAAc,CAACkB,CAAC,CAACC,MAAF,CAASjC,KAAV;AAPjC;AAAA;AAAA;AAAA;AAAA,cA9BF,eAwCE,QAAC,iBAAD;AACE,QAAA,SAAS,EAAC,qBADZ;AAEE,QAAA,KAAK,EAAC,QAFR;AAGE,QAAA,OAAO,EAAC,UAHV;AAIE,QAAA,KAAK,EAAEA,KAJT;AAKE,QAAA,cAAc,EAAC,GALjB;AAME,QAAA,YAAY,EAAC,GANf;AAOE,QAAA,YAAY,EAAC,QAPf;AAQE,QAAA,gBAAgB,EAAC,GARnB;AASE,QAAA,mBAAmB,EAAC,GATtB;AAUE,QAAA,QAAQ,EAAE,CAACgC,CAAD,EAAIhC,KAAJ,KAAcC,QAAQ,CAACD,KAAD;AAVlC;AAAA;AAAA;AAAA;AAAA,cAxCF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAuDE,QAAC,MAAD;AACE,MAAA,OAAO,EAAC,WADV;AAEE,MAAA,KAAK,EAAC,SAFR;AAGE,MAAA,IAAI,EAAC,QAHP;AAIE,MAAA,OAAO,EAAGgC,CAAD,IAAOP,SAAS,EAJ3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAvDF,eA+DE;AAAA,sBAAOd,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA,YA/DF;AAAA;AAAA;AAAA;AAAA;AAAA,UAHF;AAqED;;GArHQd,W;UASuBD,Y,EACID,gB;;;KAV3BE,W;AAuHT,eAAeA,WAAf","sourcesContent":["import {\n  Button,\n  CircularProgress,\n  FormGroup,\n  Input,\n  InputAdornment,\n  MenuItem,\n  TextField,\n} from \"@material-ui/core\";\nimport React, { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { categories } from \"../constants/form\";\nimport { useDispatch } from \"react-redux\";\nimport CurrencyTextField from \"@unicef/material-ui-currency-textfield\";\n\nimport { useAllItemsState, useMainState } from \"../reducers/mainReducer\";\n\nfunction MonthlyForm() {\n  const [category, setCategory] = useState(\"\");\n  const [value, setValue] = useState(0);\n  const [enteringData, setEnteringData] = useState(true);\n  const [loading, setLoading] = useState(false);\n  const [list, setList] = useState();\n  const [date, setDate] = useState(Date);\n  const [error, setError] = useState();\n  const [description, setDescription] = useState(\"\");\n  const { labels, setLabels } = useMainState();\n  const { allItems, setAllItems } = useAllItemsState();\n  useEffect(() => {\n    setList(labels);\n  }, [labels]);\n\n  const reset = () => {\n    setCategory(\"\");\n    setValue(0);\n    setDate(Date)\n    setDescription(\"\");\n    setEnteringData(true);\n    setLoading(false);\n  };\n  const generateColor = () => {\n    return \"#\" + (Math.random().toString(16) + \"000000\").substring(2, 8);\n  };\n\n  const handleAdd = () => {\n    setError(\"\");\n    setLoading(true);\n    setEnteringData(false);\n    setTimeout(() => {\n      if (category && value) {\n        const newItem = {\n          id: date,\n          label: category,\n          value: Number(value),\n          color: generateColor(), //\"#\" + Math.floor(Math.random() * 16777215).toString(16),\n          description: description,\n        };\n        setAllItems(newItem);\n        reset();\n      } else {\n        setError(\"error\");\n        setLoading(false);\n      }\n    }, 1000);\n  };\n  return loading ? (\n    <CircularProgress className=\"loading\" />\n  ) : (\n    <FormGroup className=\"form_control\">\n      <div>\n        <TextField\n          className=\"form_control--input\"\n          id=\"standard-select-category\"\n          select\n          label=\"Select\"\n          value={category}\n          variant=\"outlined\"\n          onChange={(e) => setCategory(e.target.value)}\n          helperText=\"Please select your category\"\n        >\n          {categories.map((option) => (\n            <MenuItem key={option.value} value={option.value}>\n              {option.label}\n            </MenuItem>\n          ))}\n        </TextField>\n        <TextField\n          id=\"date\"\n          className=\"form_control--input\"\n          label=\"Date\"\n          type=\"date\"\n          variant=\"outlined\"\n          value={date}\n          InputLabelProps={{\n            shrink: true,\n          }}\n          onChange={(e) => setDate(e.target.value)}\n        />\n\n        <TextField\n          className=\"form_control__multiline\"\n          label=\"Description\"\n          multiline\n          maxRows={4}\n          value={description}\n          variant=\"outlined\"\n          onChange={(e) => setDescription(e.target.value)}\n        />\n\n        <CurrencyTextField\n          className=\"form_control--input\"\n          label=\"Amount\"\n          variant=\"outlined\"\n          value={value}\n          currencySymbol=\"$\"\n          minimumValue=\"0\"\n          outputFormat=\"string\"\n          decimalCharacter=\".\"\n          digitGroupSeparator=\",\"\n          onChange={(e, value) => setValue(value)}\n        />\n      </div>\n\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        type=\"submit\"\n        onClick={(e) => handleAdd()}\n      >\n        Submit\n      </Button>\n      <div> {error}</div>\n    </FormGroup>\n  );\n}\n\nexport default MonthlyForm;\n"]},"metadata":{},"sourceType":"module"}