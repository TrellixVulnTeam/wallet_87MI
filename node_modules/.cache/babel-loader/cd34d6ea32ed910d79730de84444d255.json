{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nconst os = require('os');\n\nconst codeFrame = require('@babel/code-frame').codeFrameColumns;\n\nconst chalk = require('chalk');\n\nconst fs = require('fs');\n\nconst issueOrigins = {\n  typescript: 'TypeScript',\n  internal: 'fork-ts-checker-webpack-plugin'\n};\n\nfunction formatter(issue) {\n  const {\n    origin,\n    severity,\n    file,\n    line,\n    message,\n    code,\n    character\n  } = issue;\n  const colors = new chalk.constructor();\n  const messageColor = severity === 'warning' ? colors.yellow : colors.red;\n  const fileAndNumberColor = colors.bold.cyan;\n  const source = file && fs.existsSync(file) && fs.readFileSync(file, 'utf-8');\n  const frame = source ? codeFrame(source, {\n    start: {\n      line: line,\n      column: character\n    }\n  }).split('\\n').map(str => '  ' + str).join(os.EOL) : '';\n  return [messageColor.bold(`${issueOrigins[origin]} ${severity.toLowerCase()} in `) + fileAndNumberColor(`${file}(${line},${character})`) + messageColor(':'), message + '  ' + messageColor.underline(`TS${code}`), '', frame].join(os.EOL);\n}\n\nmodule.exports = formatter;","map":{"version":3,"sources":["/Users/michaelchang/Desktop/wallet/node_modules/react-dev-utils/typescriptFormatter.js"],"names":["os","require","codeFrame","codeFrameColumns","chalk","fs","issueOrigins","typescript","internal","formatter","issue","origin","severity","file","line","message","code","character","colors","constructor","messageColor","yellow","red","fileAndNumberColor","bold","cyan","source","existsSync","readFileSync","frame","start","column","split","map","str","join","EOL","toLowerCase","underline","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,mBAAD,CAAP,CAA6BE,gBAA/C;;AACA,MAAMC,KAAK,GAAGH,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMI,EAAE,GAAGJ,OAAO,CAAC,IAAD,CAAlB;;AAEA,MAAMK,YAAY,GAAG;AACnBC,EAAAA,UAAU,EAAE,YADO;AAEnBC,EAAAA,QAAQ,EAAE;AAFS,CAArB;;AAKA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACxB,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,QAAV;AAAoBC,IAAAA,IAApB;AAA0BC,IAAAA,IAA1B;AAAgCC,IAAAA,OAAhC;AAAyCC,IAAAA,IAAzC;AAA+CC,IAAAA;AAA/C,MAA6DP,KAAnE;AAEA,QAAMQ,MAAM,GAAG,IAAId,KAAK,CAACe,WAAV,EAAf;AACA,QAAMC,YAAY,GAAGR,QAAQ,KAAK,SAAb,GAAyBM,MAAM,CAACG,MAAhC,GAAyCH,MAAM,CAACI,GAArE;AACA,QAAMC,kBAAkB,GAAGL,MAAM,CAACM,IAAP,CAAYC,IAAvC;AAEA,QAAMC,MAAM,GAAGb,IAAI,IAAIR,EAAE,CAACsB,UAAH,CAAcd,IAAd,CAAR,IAA+BR,EAAE,CAACuB,YAAH,CAAgBf,IAAhB,EAAsB,OAAtB,CAA9C;AACA,QAAMgB,KAAK,GAAGH,MAAM,GAChBxB,SAAS,CAACwB,MAAD,EAAS;AAAEI,IAAAA,KAAK,EAAE;AAAEhB,MAAAA,IAAI,EAAEA,IAAR;AAAciB,MAAAA,MAAM,EAAEd;AAAtB;AAAT,GAAT,CAAT,CACGe,KADH,CACS,IADT,EAEGC,GAFH,CAEOC,GAAG,IAAI,OAAOA,GAFrB,EAGGC,IAHH,CAGQnC,EAAE,CAACoC,GAHX,CADgB,GAKhB,EALJ;AAOA,SAAO,CACLhB,YAAY,CAACI,IAAb,CAAmB,GAAElB,YAAY,CAACK,MAAD,CAAS,IAAGC,QAAQ,CAACyB,WAAT,EAAuB,MAApE,IACEd,kBAAkB,CAAE,GAAEV,IAAK,IAAGC,IAAK,IAAGG,SAAU,GAA9B,CADpB,GAEEG,YAAY,CAAC,GAAD,CAHT,EAILL,OAAO,GAAG,IAAV,GAAiBK,YAAY,CAACkB,SAAb,CAAwB,KAAItB,IAAK,EAAjC,CAJZ,EAKL,EALK,EAMLa,KANK,EAOLM,IAPK,CAOAnC,EAAE,CAACoC,GAPH,CAAP;AAQD;;AAEDG,MAAM,CAACC,OAAP,GAAiB/B,SAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nconst os = require('os');\nconst codeFrame = require('@babel/code-frame').codeFrameColumns;\nconst chalk = require('chalk');\nconst fs = require('fs');\n\nconst issueOrigins = {\n  typescript: 'TypeScript',\n  internal: 'fork-ts-checker-webpack-plugin',\n};\n\nfunction formatter(issue) {\n  const { origin, severity, file, line, message, code, character } = issue;\n\n  const colors = new chalk.constructor();\n  const messageColor = severity === 'warning' ? colors.yellow : colors.red;\n  const fileAndNumberColor = colors.bold.cyan;\n\n  const source = file && fs.existsSync(file) && fs.readFileSync(file, 'utf-8');\n  const frame = source\n    ? codeFrame(source, { start: { line: line, column: character } })\n        .split('\\n')\n        .map(str => '  ' + str)\n        .join(os.EOL)\n    : '';\n\n  return [\n    messageColor.bold(`${issueOrigins[origin]} ${severity.toLowerCase()} in `) +\n      fileAndNumberColor(`${file}(${line},${character})`) +\n      messageColor(':'),\n    message + '  ' + messageColor.underline(`TS${code}`),\n    '',\n    frame,\n  ].join(os.EOL);\n}\n\nmodule.exports = formatter;\n"]},"metadata":{},"sourceType":"script"}