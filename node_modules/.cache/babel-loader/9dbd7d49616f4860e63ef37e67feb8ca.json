{"ast":null,"code":"var _jsxFileName = \"/Users/michaelchang/Desktop/wallet/src/reducers/mainReducer.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { createContext, useCallback, useContext, useReducer } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initState = {\n  labels: [\"test\"],\n  allItems: [] // const newItem = {\n  //   id: allItems.length + 1,\n  //   label: category,\n  //   value: value,\n  //   color: random_rgba(), //\"#\" + Math.floor(Math.random() * 16777215).toString(16),\n  // };\n\n};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"ADD\":\n      return { ...state,\n        labels: [...state.labels, action.value]\n      };\n\n    case \"ADD_ITEM\":\n      const newItem = action.value;\n      const {\n        allItems\n      } = state;\n      const itemAlreadyExist = allItems.find(item => item.label === newItem.label);\n\n      if (itemAlreadyExist) {\n        newItem.value += itemAlreadyExist.value;\n        return { ...state,\n          allItems: state.contents.map((content, i) => i === 1 ? { ...content,\n            text: action.payload\n          } : content)\n        };\n      }\n\n      return { ...state,\n        allItems: [...state.allItems, action.value]\n      };\n\n    default:\n      return state;\n  }\n}\n\nconst initialContext = {\n  state: initState,\n  dispatch: () => {}\n};\nconst MainContext = /*#__PURE__*/createContext(initialContext);\nexport function MainProvider({\n  children\n}) {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, initState, undefined);\n  return /*#__PURE__*/_jsxDEV(MainContext.Provider, {\n    value: {\n      state,\n      dispatch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MainProvider, \"ivzsx5aR9qRFuEtyOcndflQiQ1Q=\");\n\n_c = MainProvider;\nexport const useMainState = () => {\n  _s2();\n\n  const {\n    state,\n    dispatch\n  } = useContext(MainContext);\n  const setLabels = useCallback(value => {\n    dispatch({\n      type: \"ADD\",\n      value\n    });\n  }, [dispatch]);\n  return {\n    labels: state.labels,\n    setLabels\n  };\n};\n\n_s2(useMainState, \"dZNSK8cgMK1H2QVs9aYl6vbAWKc=\");\n\nexport const useAllItemsState = () => {\n  _s3();\n\n  const {\n    state,\n    dispatch\n  } = useContext(MainContext);\n  const setAllItems = useCallback(value => {\n    dispatch({\n      type: \"ADD_ITEM\",\n      value\n    });\n  }, [dispatch]);\n  return {\n    allItems: state.allItems,\n    setAllItems\n  };\n};\n\n_s3(useAllItemsState, \"+9QG0S2p3klEmGfexgPo6hb3weE=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"MainProvider\");","map":{"version":3,"sources":["/Users/michaelchang/Desktop/wallet/src/reducers/mainReducer.js"],"names":["React","createContext","useCallback","useContext","useReducer","initState","labels","allItems","reducer","state","action","type","value","newItem","itemAlreadyExist","find","item","label","contents","map","content","i","text","payload","initialContext","dispatch","MainContext","MainProvider","children","undefined","useMainState","setLabels","useAllItemsState","setAllItems"],"mappings":"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","sourcesContent":["import React, {\n  createContext,\n  useCallback,\n  useContext,\n  useReducer,\n} from \"react\";\n\nconst initState = {\n  labels: [\"test\"],\n  allItems: [],\n  // const newItem = {\n  //   id: allItems.length + 1,\n  //   label: category,\n  //   value: value,\n  //   color: random_rgba(), //\"#\" + Math.floor(Math.random() * 16777215).toString(16),\n  // };\n};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"ADD\":\n      return {\n        ...state,\n        labels: [...state.labels, action.value],\n      };\n    case \"ADD_ITEM\":\n      const newItem = action.value;\n      const { allItems } = state;\n      const itemAlreadyExist = allItems.find(\n        (item) => item.label === newItem.label\n      );\n      if (itemAlreadyExist) {\n        newItem.value += itemAlreadyExist.value;\n        return {\n          ...state,\n          allItems: state.contents.map(\n            (content, i) => i === 1 ? {...content, text: action.payload}\n                                    : content\n        )\n        };\n      }\n      return {\n        ...state,\n\n        allItems: [...state.allItems, action.value],\n      };\n\n    default:\n      return state;\n  }\n}\n\nconst initialContext = {\n  state: initState,\n  dispatch: () => {},\n};\n\nconst MainContext = createContext(initialContext);\n\nexport function MainProvider({ children }) {\n  const [state, dispatch] = useReducer(reducer, initState, undefined);\n\n  return (\n    <MainContext.Provider value={{ state, dispatch }}>\n      {children}\n    </MainContext.Provider>\n  );\n}\n\nexport const useMainState = () => {\n  const { state, dispatch } = useContext(MainContext);\n\n  const setLabels = useCallback(\n    (value) => {\n      dispatch({ type: \"ADD\", value });\n    },\n    [dispatch]\n  );\n  return { labels: state.labels, setLabels };\n};\n\nexport const useAllItemsState = () => {\n  const { state, dispatch } = useContext(MainContext);\n\n  const setAllItems = useCallback(\n    (value) => {\n      dispatch({ type: \"ADD_ITEM\", value });\n    },\n    [dispatch]\n  );\n  return { allItems: state.allItems, setAllItems };\n};\n"]},"metadata":{},"sourceType":"module"}