{"ast":null,"code":"var _jsxFileName = \"/Users/michaelchang/Desktop/wallet/src/components/MonthlyTable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect, useCallback, useMemo } from \"react\";\nimport { useAllItemsState, useMainState } from \"../reducers/mainReducer\";\nimport MonthlyPie from \"./MonthlyPie\";\nimport MonthlyForm from \"./MonthlyForm\";\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from \"@material-ui/core\";\nimport { categories } from \"../constants/form\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction MonthlyTable({\n  data\n}) {\n  _s();\n\n  const {\n    allItems\n  } = useAllItemsState();\n  const [enteringData, setEnteringData] = useState(true);\n  const [rows, setRows] = useState([]);\n\n  const createData = (category, value) => {\n    return {\n      category,\n      value\n    };\n  };\n\n  useEffect(() => {\n    const processedRows = categories.map(item => createData(item.label, item.value));\n    setRows(processedRows);\n  }, [data]);\n  const formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD'\n  });\n  console.log(\"here\", rows);\n  return /*#__PURE__*/_jsxDEV(TableContainer, {\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      \"aria-label\": \"simple table\",\n      children: [/*#__PURE__*/_jsxDEV(TableHead, {\n        children: /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [/*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"Category\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            align: \"right\",\n            children: \"Value\\xA0($)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n        children: rows.map((category, idx) => /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [/*#__PURE__*/_jsxDEV(TableCell, {\n            component: \"th\",\n            scope: \"row\",\n            children: category.category\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            align: \"right\",\n            children: category.category ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\" \", formatter.format(category.value), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 60\n            }, this) : \"N/A\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 15\n          }, this)]\n        }, category.label, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MonthlyTable, \"YhAGj95/GAE45lcOsxOs1SewOPk=\", false, function () {\n  return [useAllItemsState];\n});\n\n_c = MonthlyTable;\nexport default MonthlyTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"MonthlyTable\");","map":{"version":3,"sources":["/Users/michaelchang/Desktop/wallet/src/components/MonthlyTable.js"],"names":["React","useState","useContext","useEffect","useCallback","useMemo","useAllItemsState","useMainState","MonthlyPie","MonthlyForm","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","categories","MonthlyTable","data","allItems","enteringData","setEnteringData","rows","setRows","createData","category","value","processedRows","map","item","label","formatter","Intl","NumberFormat","style","currency","console","log","idx","format"],"mappings":";;;AAAA,OAAOA,KAAP,IACEC,QADF,EAEEC,UAFF,EAGEC,SAHF,EAIEC,WAJF,EAKEC,OALF,QAMO,OANP;AAOA,SAASC,gBAAT,EAA2BC,YAA3B,QAA+C,yBAA/C;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SACEC,KADF,EAEEC,SAFF,EAGEC,SAHF,EAIEC,cAJF,EAKEC,SALF,EAMEC,QANF,QAOO,mBAPP;AAQA,SAASC,UAAT,QAA2B,mBAA3B;;;AAEA,SAASC,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAgC;AAAA;;AAC9B,QAAM;AAAEC,IAAAA;AAAF,MAAeb,gBAAgB,EAArC;AACA,QAAM,CAACc,YAAD,EAAeC,eAAf,IAAkCpB,QAAQ,CAAC,IAAD,CAAhD;AACA,QAAM,CAACqB,IAAD,EAAOC,OAAP,IAAkBtB,QAAQ,CAAC,EAAD,CAAhC;;AAEA,QAAMuB,UAAU,GAAG,CAACC,QAAD,EAAWC,KAAX,KAAqB;AACtC,WAAO;AAAED,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,KAAP;AACD,GAFD;;AAIAvB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMwB,aAAa,GAAGX,UAAU,CAACY,GAAX,CAAgBC,IAAD,IAEnCL,UAAU,CAACK,IAAI,CAACC,KAAN,EAAaD,IAAI,CAACH,KAAlB,CAFU,CAAtB;AAIAH,IAAAA,OAAO,CAACI,aAAD,CAAP;AACD,GANQ,EAMN,CAACT,IAAD,CANM,CAAT;AAQA,QAAMa,SAAS,GAAG,IAAIC,IAAI,CAACC,YAAT,CAAsB,OAAtB,EAA+B;AAC/CC,IAAAA,KAAK,EAAE,UADwC;AAE/CC,IAAAA,QAAQ,EAAE;AAFqC,GAA/B,CAAlB;AAIAC,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBf,IAApB;AAEA,sBACE,QAAC,cAAD;AAAA,2BACE,QAAC,KAAD;AAAO,oBAAW,cAAlB;AAAA,8BACE,QAAC,SAAD;AAAA,+BACE,QAAC,QAAD;AAAA,kCACE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,SAAD;AAAW,YAAA,KAAK,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAOE,QAAC,SAAD;AAAA,kBACGA,IAAI,CAACM,GAAL,CAAS,CAACH,QAAD,EAAUa,GAAV,kBACR,QAAC,QAAD;AAAA,kCACE,QAAC,SAAD;AAAW,YAAA,SAAS,EAAC,IAArB;AAA0B,YAAA,KAAK,EAAC,KAAhC;AAAA,sBACGb,QAAQ,CAACA;AADZ;AAAA;AAAA;AAAA;AAAA,kBADF,eAIE,QAAC,SAAD;AAAW,YAAA,KAAK,EAAC,OAAjB;AAAA,sBAA0BA,QAAQ,CAACA,QAAT,gBAAmB;AAAA,8BAAOM,SAAS,CAACQ,MAAV,CAAiBd,QAAQ,CAACC,KAA1B,CAAP;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAnB,GAAqE;AAA/F;AAAA;AAAA;AAAA;AAAA,kBAJF;AAAA,WAAeD,QAAQ,CAACK,KAAxB;AAAA;AAAA;AAAA;AAAA,gBADD;AADH;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD;;GA7CQb,Y;UACcX,gB;;;KADdW,Y;AA8CT,eAAeA,YAAf","sourcesContent":["import React, {\n  useState,\n  useContext,\n  useEffect,\n  useCallback,\n  useMemo,\n} from \"react\";\nimport { useAllItemsState, useMainState } from \"../reducers/mainReducer\";\nimport MonthlyPie from \"./MonthlyPie\";\nimport MonthlyForm from \"./MonthlyForm\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n} from \"@material-ui/core\";\nimport { categories } from \"../constants/form\";\n\nfunction MonthlyTable({ data }) {\n  const { allItems } = useAllItemsState();\n  const [enteringData, setEnteringData] = useState(true);\n  const [rows, setRows] = useState([]);\n\n  const createData = (category, value) => {\n    return { category, value };\n  };\n\n  useEffect(() => {\n    const processedRows = categories.map((item) =>\n\n      createData(item.label, item.value)\n    );\n    setRows(processedRows);\n  }, [data]);\n\n  const formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n  });\n  console.log(\"here\", rows)\n\n  return (\n    <TableContainer>\n      <Table aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>Category</TableCell>\n            <TableCell align=\"right\">Value&nbsp;($)</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map((category,idx) => (\n            <TableRow key={category.label}>\n              <TableCell component=\"th\" scope=\"row\">\n                {category.category}\n              </TableCell>\n              <TableCell align=\"right\">{category.category? <div> {formatter.format(category.value)} </div> : \"N/A\"}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\nexport default MonthlyTable;\n"]},"metadata":{},"sourceType":"module"}