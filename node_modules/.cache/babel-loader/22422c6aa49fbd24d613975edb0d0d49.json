{"ast":null,"code":"var _jsxFileName = \"/Users/michaelchang/Desktop/wallet/src/components/MonthlyTable.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect, useCallback, useMemo } from \"react\";\nimport { useAllItemsState, useMainState } from \"../reducers/mainReducer\";\nimport MonthlyPie from \"./MonthlyPie\";\nimport MonthlyForm from \"./MonthlyForm\";\nimport { Collapse, IconButton, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from \"@material-ui/core\";\nimport { categories } from \"../constants/form\";\nimport KeyboardArrowDownIcon from \"@material-ui/icons/KeyboardArrowDown\";\nimport KeyboardArrowUpIcon from \"@material-ui/icons/KeyboardArrowUp\";\nimport formatter from \"../utils/index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Row = ({\n  category,\n  rows,\n  formatter\n}) => {\n  _s();\n\n  const [open, setOpen] = useState(false);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TableRow, {\n      children: [/*#__PURE__*/_jsxDEV(TableCell, {\n        children: [\" \", /*#__PURE__*/_jsxDEV(IconButton, {\n          \"aria-label\": \"expand row\",\n          size: \"small\",\n          onClick: () => setOpen(!open),\n          children: open ? /*#__PURE__*/_jsxDEV(KeyboardArrowUpIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 21\n          }, this) : /*#__PURE__*/_jsxDEV(KeyboardArrowDownIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 47\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n        component: \"th\",\n        scope: \"row\",\n        children: category.label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n        align: \"right\",\n        children: rows.find(o => o.category === category.label) ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: formatter.format(rows.find(o => o.category === category.label).value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this) : \"N/A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, category.label, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n      style: {\n        paddingBottom: 0,\n        paddingTop: 0\n      },\n      colSpan: 6,\n      children: /*#__PURE__*/_jsxDEV(Collapse, {\n        in: open,\n        timeout: \"auto\",\n        unmountOnExit: true,\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          margin: 1,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            gutterBottom: true,\n            component: \"div\",\n            children: \"History\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Table, {\n            size: \"small\",\n            \"aria-label\": \"purchases\",\n            children: [/*#__PURE__*/_jsxDEV(TableHead, {\n              children: /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Date\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 66,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Customer\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 67,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"right\",\n                  children: \"Amount\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 68,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"right\",\n                  children: \"Total price ($)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 69,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n              children: row.history.map(historyRow => /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  component: \"th\",\n                  scope: \"row\",\n                  children: historyRow.date\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 75,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: historyRow.customerId\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 78,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"right\",\n                  children: historyRow.amount\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 79,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: \"right\",\n                  children: Math.round(historyRow.amount * row.price * 100) / 100\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 80,\n                  columnNumber: 21\n                }, this)]\n              }, historyRow.date, true, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Row, \"xG1TONbKtDWtdOTrXaTAsNhPg/Q=\");\n\n_c = Row;\n\nfunction MonthlyTable({\n  data\n}) {\n  _s2();\n\n  const {\n    allItems\n  } = useAllItemsState();\n  const [enteringData, setEnteringData] = useState(true);\n  const [rows, setRows] = useState([]);\n\n  const createData = (category, value) => {\n    return {\n      category,\n      value\n    };\n  };\n\n  useEffect(() => {\n    const processedRows = allItems.map(item => createData(item.label, item.value));\n    console.log(processedRows);\n    setRows(processedRows);\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(TableContainer, {\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      \"aria-label\": \"simple table\",\n      children: [/*#__PURE__*/_jsxDEV(TableHead, {\n        children: /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [/*#__PURE__*/_jsxDEV(TableCell, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: \"Category\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n            align: \"right\",\n            children: \"Value\\xA0($)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n        children: categories.map((category, idx) => /*#__PURE__*/_jsxDEV(Row, {\n          category: category,\n          rows: rows\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(MonthlyTable, \"YhAGj95/GAE45lcOsxOs1SewOPk=\", false, function () {\n  return [useAllItemsState];\n});\n\n_c2 = MonthlyTable;\nexport default MonthlyTable;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Row\");\n$RefreshReg$(_c2, \"MonthlyTable\");","map":{"version":3,"sources":["/Users/michaelchang/Desktop/wallet/src/components/MonthlyTable.js"],"names":["React","useState","useContext","useEffect","useCallback","useMemo","useAllItemsState","useMainState","MonthlyPie","MonthlyForm","Collapse","IconButton","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","categories","KeyboardArrowDownIcon","KeyboardArrowUpIcon","formatter","Row","category","rows","open","setOpen","label","find","o","format","value","paddingBottom","paddingTop","row","history","map","historyRow","date","customerId","amount","Math","round","price","MonthlyTable","data","allItems","enteringData","setEnteringData","setRows","createData","processedRows","item","console","log","idx"],"mappings":"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","sourcesContent":["import React, {\n  useState,\n  useContext,\n  useEffect,\n  useCallback,\n  useMemo,\n} from \"react\";\nimport { useAllItemsState, useMainState } from \"../reducers/mainReducer\";\nimport MonthlyPie from \"./MonthlyPie\";\nimport MonthlyForm from \"./MonthlyForm\";\nimport {\n    Collapse,\n  IconButton,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n} from \"@material-ui/core\";\nimport { categories } from \"../constants/form\";\n\nimport KeyboardArrowDownIcon from \"@material-ui/icons/KeyboardArrowDown\";\nimport KeyboardArrowUpIcon from \"@material-ui/icons/KeyboardArrowUp\";\nimport formatter from \"../utils/index\";\nconst Row = ({ category, rows, formatter }) => {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <>\n      <TableRow key={category.label}>\n        <TableCell>\n          {\" \"}\n          <IconButton\n            aria-label=\"expand row\"\n            size=\"small\"\n            onClick={() => setOpen(!open)}\n          >\n            {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n          </IconButton>\n        </TableCell>\n        <TableCell component=\"th\" scope=\"row\">\n          {category.label}\n        </TableCell>\n        <TableCell align=\"right\">\n          {rows.find((o) => o.category === category.label) ? (\n            <div>\n              {formatter.format(\n                rows.find((o) => o.category === category.label).value\n              )}\n            </div>\n          ) : (\n            \"N/A\"\n          )}\n        </TableCell>\n      </TableRow>\n      <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n        <Collapse in={open} timeout=\"auto\" unmountOnExit>\n          <Box margin={1}>\n            <Typography variant=\"h6\" gutterBottom component=\"div\">\n              History\n            </Typography>\n            <Table size=\"small\" aria-label=\"purchases\">\n              <TableHead>\n                <TableRow>\n                  <TableCell>Date</TableCell>\n                  <TableCell>Customer</TableCell>\n                  <TableCell align=\"right\">Amount</TableCell>\n                  <TableCell align=\"right\">Total price ($)</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {row.history.map((historyRow) => (\n                  <TableRow key={historyRow.date}>\n                    <TableCell component=\"th\" scope=\"row\">\n                      {historyRow.date}\n                    </TableCell>\n                    <TableCell>{historyRow.customerId}</TableCell>\n                    <TableCell align=\"right\">{historyRow.amount}</TableCell>\n                    <TableCell align=\"right\">\n                      {Math.round(historyRow.amount * row.price * 100) / 100}\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </Box>\n        </Collapse>\n      </TableCell>\n    </>\n  );\n};\nfunction MonthlyTable({ data }) {\n  const { allItems } = useAllItemsState();\n  const [enteringData, setEnteringData] = useState(true);\n  const [rows, setRows] = useState([]);\n\n  const createData = (category, value) => {\n    return { category, value };\n  };\n\n  useEffect(() => {\n    const processedRows = allItems.map((item) =>\n      createData(item.label, item.value)\n    );\n    console.log(processedRows);\n    setRows(processedRows);\n  }, [data]);\n\n  return (\n    <TableContainer>\n      <Table aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <TableCell></TableCell>\n            <TableCell>Category</TableCell>\n            <TableCell align=\"right\">Value&nbsp;($)</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {categories.map((category, idx) => (\n            <Row category={category} rows={rows} />\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\nexport default MonthlyTable;\n"]},"metadata":{},"sourceType":"module"}