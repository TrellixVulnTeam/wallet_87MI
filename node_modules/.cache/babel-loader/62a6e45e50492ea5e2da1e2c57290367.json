{"ast":null,"code":"var _jsxFileName = \"/Users/michaelchang/Desktop/wallet/src/components/MonthlyForm.js\",\n    _s = $RefreshSig$();\n\nimport { Button, CircularProgress, FormGroup, Input, InputAdornment, MenuItem, StylesProvider, TextField } from \"@material-ui/core\";\nimport React, { useState, useEffect } from \"react\";\nimport { categories } from \"../constants/form\";\nimport CurrencyTextField from \"@unicef/material-ui-currency-textfield\";\nimport axios from \"axios\";\nimport * as styles from \"../styles/form.scss\";\nimport { useAllItemsState, useMainState } from \"../reducers/mainReducer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction MonthlyForm() {\n  _s();\n\n  const [category, setCategory] = useState(\"\");\n  const [value, setValue] = useState(0);\n  const [enteringData, setEnteringData] = useState(true);\n  const [loading, setLoading] = useState(false);\n  const [list, setList] = useState();\n  const [date, setDate] = useState(Date);\n  const [error, setError] = useState();\n  const [description, setDescription] = useState(\"\");\n  const {\n    labels,\n    setLabels\n  } = useMainState();\n  const {\n    allItems,\n    setAllItems\n  } = useAllItemsState();\n  useEffect(() => {\n    setList(labels);\n  }, [labels]);\n\n  const reset = () => {\n    setCategory(\"\");\n    setValue(0);\n    setDate(Date);\n    setDescription(\"\");\n    setEnteringData(true);\n    setLoading(false);\n    console.log(\"items:\", allItems);\n  };\n\n  const generateColor = () => {\n    return \"#\" + (Math.random().toString(16) + \"000000\").substring(2, 8);\n  };\n\n  const handleAdd = () => {\n    setError(\"\");\n    setLoading(true);\n    setEnteringData(false);\n    setTimeout(() => {\n      if (category && value) {\n        const newItem = {\n          id: date,\n          label: category,\n          value: Number(value),\n          //   color: generateColor(), //\"#\" + Math.floor(Math.random() * 16777215).toString(16),\n          description: description\n        };\n        setAllItems(newItem);\n        reset();\n      } else {\n        setError(\"error\");\n        setLoading(false);\n      }\n    }, 1000);\n  };\n\n  return loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n    className: \"loading\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(FormGroup, {\n    className: \"form_control\",\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      className: \"form_control--input\",\n      id: \"standard-select-category\",\n      select: true,\n      required: true,\n      label: \"Select a category\",\n      value: category,\n      variant: \"outlined\",\n      onChange: e => setCategory(e.target.value),\n      helperText: \"Please select your category\",\n      children: categories.map(option => /*#__PURE__*/_jsxDEV(MenuItem, {\n        value: option.value,\n        children: option.label\n      }, option.value, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      id: \"date\",\n      className: \"form_control--input\",\n      label: \"Date\",\n      type: \"date\",\n      variant: \"outlined\",\n      value: date,\n      InputLabelProps: {\n        shrink: true\n      },\n      required: true,\n      onChange: e => setDate(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      className: \"form_control__multiline\",\n      label: \"Description\",\n      multiline: true,\n      maxRows: 4,\n      value: description,\n      variant: \"outlined\",\n      onChange: e => setDescription(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CurrencyTextField, {\n      className: \"form_control--input\",\n      label: \"Amount\",\n      required: true,\n      variant: \"outlined\",\n      value: value,\n      currencySymbol: \"$\",\n      minimumValue: \"0\",\n      outputFormat: \"string\",\n      decimalCharacter: \".\",\n      digitGroupSeparator: \",\",\n      onChange: (e, value) => setValue(value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      type: \"submit\",\n      onClick: e => handleAdd(),\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\" \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MonthlyForm, \"sRQ670FjLDP0/fWwglGBOJSVQVI=\", false, function () {\n  return [useMainState, useAllItemsState];\n});\n\n_c = MonthlyForm;\nexport default MonthlyForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"MonthlyForm\");","map":{"version":3,"sources":["/Users/michaelchang/Desktop/wallet/src/components/MonthlyForm.js"],"names":["Button","CircularProgress","FormGroup","Input","InputAdornment","MenuItem","StylesProvider","TextField","React","useState","useEffect","categories","CurrencyTextField","axios","styles","useAllItemsState","useMainState","MonthlyForm","category","setCategory","value","setValue","enteringData","setEnteringData","loading","setLoading","list","setList","date","setDate","Date","error","setError","description","setDescription","labels","setLabels","allItems","setAllItems","reset","console","log","generateColor","Math","random","toString","substring","handleAdd","setTimeout","newItem","id","label","Number","e","target","map","option","shrink"],"mappings":"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","sourcesContent":["import {\n  Button,\n  CircularProgress,\n  FormGroup,\n  Input,\n  InputAdornment,\n  MenuItem,\n  StylesProvider,\n  TextField,\n} from \"@material-ui/core\";\nimport React, { useState, useEffect } from \"react\";\nimport { categories } from \"../constants/form\";\nimport CurrencyTextField from \"@unicef/material-ui-currency-textfield\";\nimport axios from \"axios\";\nimport * as styles from \"../styles/form.scss\";\n\nimport { useAllItemsState, useMainState } from \"../reducers/mainReducer\";\n\nfunction MonthlyForm() {\n  const [category, setCategory] = useState(\"\");\n  const [value, setValue] = useState(0);\n  const [enteringData, setEnteringData] = useState(true);\n  const [loading, setLoading] = useState(false);\n  const [list, setList] = useState();\n  const [date, setDate] = useState(Date);\n  const [error, setError] = useState();\n  const [description, setDescription] = useState(\"\");\n  const { labels, setLabels } = useMainState();\n  const { allItems, setAllItems } = useAllItemsState();\n  useEffect(() => {\n    setList(labels);\n  }, [labels]);\n\n  const reset = () => {\n    setCategory(\"\");\n    setValue(0);\n    setDate(Date);\n    setDescription(\"\");\n    setEnteringData(true);\n    setLoading(false);\n    console.log(\"items:\", allItems);\n  };\n  const generateColor = () => {\n    return \"#\" + (Math.random().toString(16) + \"000000\").substring(2, 8);\n  };\n\n  const handleAdd = () => {\n    setError(\"\");\n    setLoading(true);\n    setEnteringData(false);\n    setTimeout(() => {\n      if (category && value) {\n        const newItem = {\n          id: date,\n          label: category,\n          value: Number(value),\n        //   color: generateColor(), //\"#\" + Math.floor(Math.random() * 16777215).toString(16),\n          description: description,\n        };\n        setAllItems(newItem);\n\n        reset();\n      } else {\n        setError(\"error\");\n        setLoading(false);\n      }\n    }, 1000);\n  };\n  return loading ? (\n    <CircularProgress className=\"loading\" />\n  ) : (\n    <FormGroup className=\"form_control\">\n      <TextField\n        className=\"form_control--input\"\n        id=\"standard-select-category\"\n        select\n        required\n        label=\"Select a category\"\n        value={category}\n        variant=\"outlined\"\n        onChange={(e) => setCategory(e.target.value)}\n        helperText=\"Please select your category\"\n      >\n        {categories.map((option) => (\n          <MenuItem key={option.value} value={option.value}>\n            {option.label}\n          </MenuItem>\n        ))}\n      </TextField>\n      <TextField\n        id=\"date\"\n        className=\"form_control--input\"\n        label=\"Date\"\n        type=\"date\"\n        variant=\"outlined\"\n        value={date}\n        InputLabelProps={{\n          shrink: true,\n        }}\n        required\n        onChange={(e) => setDate(e.target.value)}\n      />\n\n      <TextField\n        className=\"form_control__multiline\"\n        label=\"Description\"\n        multiline\n        maxRows={4}\n        value={description}\n        variant=\"outlined\"\n        onChange={(e) => setDescription(e.target.value)}\n      />\n\n      <CurrencyTextField\n        className=\"form_control--input\"\n        label=\"Amount\"\n        required\n        variant=\"outlined\"\n        value={value}\n        currencySymbol=\"$\"\n        minimumValue=\"0\"\n        outputFormat=\"string\"\n        decimalCharacter=\".\"\n        digitGroupSeparator=\",\"\n        onChange={(e, value) => setValue(value)}\n      />\n\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        type=\"submit\"\n        onClick={(e) => handleAdd()}\n      >\n        Submit\n      </Button>\n      <div> {error}</div>\n    </FormGroup>\n  );\n}\n\nexport default MonthlyForm;\n"]},"metadata":{},"sourceType":"module"}